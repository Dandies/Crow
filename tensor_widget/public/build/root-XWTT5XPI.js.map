{
  "version": 3,
  "sources": ["../../app/root.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/root.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/root.tsx\");\n  import.meta.hot.lastModified = \"1709303040328.7424\";\n}\n// REMIX HMR END\n\n// root.tsx\nimport React, { useContext, useEffect } from \"react\";\nimport { withEmotionCache } from \"@emotion/react\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { Links, LiveReload, Meta, Outlet, Scripts, ScrollRestoration } from \"@remix-run/react\";\n// Depends on the runtime you choose\n\nimport { ServerStyleContext, ClientStyleContext } from \"./context\";\nexport const meta = () => [{\n  charset: \"utf-8\",\n  title: \"New Remix App\",\n  viewport: \"width=device-width,initial-scale=1\"\n}];\nexport let links = () => {\n  return [{\n    rel: \"preconnect\",\n    href: \"https://fonts.googleapis.com\"\n  }, {\n    rel: \"preconnect\",\n    href: \"https://fonts.gstatic.com\"\n  }, {\n    rel: \"stylesheet\",\n    href: \"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap\"\n  }];\n};\nconst Document = _s(withEmotionCache(_c = _s(({\n  children\n}, emotionCache) => {\n  _s();\n  const serverStyleData = useContext(ServerStyleContext);\n  const clientStyleData = useContext(ClientStyleContext);\n\n  // Only executed on client\n  useEffect(() => {\n    // re-link sheet container\n    emotionCache.sheet.container = document.head;\n    // re-inject tags\n    const tags = emotionCache.sheet.tags;\n    emotionCache.sheet.flush();\n    tags.forEach(tag => {\n      ;\n      emotionCache.sheet._insertTag(tag);\n    });\n    // reset cache to reapply global styles\n    clientStyleData?.reset();\n  }, []);\n  return <html lang=\"en\">\n      <head>\n        <Meta />\n        <Links />\n        {serverStyleData?.map(({\n        key,\n        ids,\n        css\n      }) => <style key={key} data-emotion={`${key} ${ids.join(\" \")}`} dangerouslySetInnerHTML={{\n        __html: css\n      }} />)}\n      </head>\n      <body>\n        <ChakraProvider>\n          <Outlet />\n        </ChakraProvider>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>;\n}, \"vFrPjx9OU/CyW6kig5dfFtYNdnQ=\")), \"vFrPjx9OU/CyW6kig5dfFtYNdnQ=\");\n_c2 = Document;\nvar _c, _c2;\n$RefreshReg$(_c, \"Document$withEmotionCache\");\n$RefreshReg$(_c2, \"Document\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,mBAA6C;AA+CrC;AApER,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,mBAAqB,EAAE;AAAA,EAChE;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAc;AACd,cAAY,IAAI,eAAe;AACjC;AAWO,IAAM,OAAO,MAAM,CAAC;AAAA,EACzB,SAAS;AAAA,EACT,OAAO;AAAA,EACP,UAAU;AACZ,CAAC;AACM,IAAI,QAAQ,MAAM;AACvB,SAAO,CAAC;AAAA,IACN,KAAK;AAAA,IACL,MAAM;AAAA,EACR,GAAG;AAAA,IACD,KAAK;AAAA,IACL,MAAM;AAAA,EACR,GAAG;AAAA,IACD,KAAK;AAAA,IACL,MAAM;AAAA,EACR,CAAC;AACH;AACA,IAAM,WAAW,GAAG,iBAAiB,KAAK,GAAG,CAAC;AAAA,EAC5C;AACF,GAAG,iBAAiB;AAClB,KAAG;AACH,QAAM,sBAAkB,yBAAW,kBAAkB;AACrD,QAAM,sBAAkB,yBAAW,kBAAkB;AAGrD,8BAAU,MAAM;AAEd,iBAAa,MAAM,YAAY,SAAS;AAExC,UAAM,OAAO,aAAa,MAAM;AAChC,iBAAa,MAAM,MAAM;AACzB,SAAK,QAAQ,SAAO;AAClB;AACA,mBAAa,MAAM,WAAW,GAAG;AAAA,IACnC,CAAC;AAED,qBAAiB,MAAM;AAAA,EACzB,GAAG,CAAC,CAAC;AACL,SAAO,mDAAC,UAAK,MAAK,MACd;AAAA,uDAAC,UACC;AAAA,yDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAM;AAAA,MACN,mDAAC,WAAD;AAAA;AAAA;AAAA;AAAA,aAAO;AAAA,MACN,iBAAiB,IAAI,CAAC;AAAA,QACvB;AAAA,QACA;AAAA,QACA;AAAA,MACF,MAAM,mDAAC,WAAgB,gBAAc,GAAG,OAAO,IAAI,KAAK,GAAG,KAAK,yBAAyB;AAAA,QACvF,QAAQ;AAAA,MACV,KAFkB,KAAZ;AAAA;AAAA;AAAA;AAAA,aAEH,CAAE;AAAA,SATL;AAAA;AAAA;AAAA;AAAA,WAUA;AAAA,IACA,mDAAC,UACC;AAAA,yDAAC,kBACC,6DAAC,YAAD;AAAA;AAAA;AAAA;AAAA,aAAQ,KADV;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,uBAAD;AAAA;AAAA;AAAA;AAAA,aAAmB;AAAA,MACnB,mDAAC,aAAD;AAAA;AAAA;AAAA;AAAA,aAAS;AAAA,MACT,mDAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,aAAY;AAAA,SANd;AAAA;AAAA;AAAA;AAAA,WAOA;AAAA,OAnBG;AAAA;AAAA;AAAA;AAAA,SAoBL;AACJ,GAAG,8BAA8B,CAAC,GAAG,8BAA8B;AACnE,MAAM;AACN,IAAI;AAAJ,IAAQ;AACR,aAAa,IAAI,2BAA2B;AAC5C,aAAa,KAAK,UAAU;AAE5B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
